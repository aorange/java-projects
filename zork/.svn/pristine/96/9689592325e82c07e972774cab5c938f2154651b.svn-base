import com.google.gson.Gson;


import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

/**
 * Miniature room traversal game that takes input from a user to move from room to room and prints out the description
 * of each room.
 * @author Allen Tang
 */
public class Main {

    private final static int MIN_ROOMS_FOR_OR = 2;
    private final static int SUBSTRING_AFTER_GO = 3;

    public static void main(String args[]){
        Siebel layout;
        if(args.length == 0){
            layout = parseJsonFromUrl(null);
        } else{
            layout = parseJsonFromUrl(args[0]);
        }
        if (layout == null){ //check here in case of an exception earlier
            return;
        }
        Map<String, Room> roomMap = initializeHashmap(layout);
        String currentRoom = layout.getInitialRoom();
        oneCycleOfZork(roomMap, currentRoom);

    }

    private static void oneCycleOfZork(Map<String, Room> roomMap, String currentRoom){
        System.out.println(roomMap.get(currentRoom).getDescription());
        String possibleDirections = "";
        int numAdjacentRooms = roomMap.get(currentRoom).getDirections().length;

        for (int numDirections = 0; numDirections < numAdjacentRooms; numDirections++){
            String currentDirection = roomMap.get(currentRoom).getDirections()[numDirections].getDirection();
            if (numAdjacentRooms >= MIN_ROOMS_FOR_OR && (numDirections == numAdjacentRooms -1)){
                possibleDirections += ("or " + currentDirection);
            } else if (numAdjacentRooms == 1){
                possibleDirections += currentDirection;
            } else{
                possibleDirections += (currentDirection + ", ");
            }

        }
        System.out.println("From here you can go: " + possibleDirections);
        Scanner cmdParser = new Scanner(System.in);
        String cmd = cmdParser.nextLine();
        String lowerCaseCmd = cmd.toLowerCase();
        if (lowerCaseCmd.equals("done") | lowerCaseCmd.equals("exit") | lowerCaseCmd.equals("quit")) {
            return;//guarding return
        } else if (lowerCaseCmd.contains("go")){
            String nextRoom = checkCmdValidityAndFindRoom(lowerCaseCmd, roomMap.get(currentRoom).getDirections());
            if (nextRoom != null){
                oneCycleOfZork(roomMap, nextRoom);
            } else{
                System.out.println("I can't go " + cmd);
                oneCycleOfZork(roomMap, currentRoom);
            }
        } else{
            System.out.println("I don't understand: '" + cmd + "'");
            oneCycleOfZork(roomMap, currentRoom);
        }

    }

    private static String checkCmdValidityAndFindRoom(String cmd, AdjacentRoom[] directionsToCheck){
        for (AdjacentRoom currentCheck : directionsToCheck){
            if (currentCheck.getDirection().toLowerCase().equals(cmd.substring(SUBSTRING_AFTER_GO))){
                return currentCheck.getRoom();
            }
        }
        return null;
    }



    /**
     * Method for initializing our hash map which matches Room names to the Room objects
     * @param layout the building we are making map for
     * @return completed map
     */
    private static Map<String, Room> initializeHashmap(Siebel layout){
        Map<String, Room> roomMap = new HashMap<>();
        for (Room current : layout.getRooms()){
            roomMap.put(current.getName(), current); //match each room name to the room
        }
        return roomMap;
    }

    /**
     * Method that parses the Json from a url using Gson, handles two exceptions internally
     * @return the parsed object "Siebel"
     */
    private static Siebel parseJsonFromUrl(String userInputtedUrl){
        try {
            //read JSON from said url and store in object
            String urlToParse;
            if (userInputtedUrl == null){
                urlToParse = "https://courses.engr.illinois.edu/cs126/resources/siebel.json";
            } else{
                urlToParse = userInputtedUrl;
            }
            URL jsonUrl = new URL(urlToParse);
            InputStreamReader reader = new InputStreamReader(jsonUrl.openStream());
            Gson buildingGson = new Gson();
            return buildingGson.fromJson(reader, Siebel.class);
        } catch(MalformedURLException urlE){
            System.out.println("Bad URL");
            return null;
        } catch(IOException ioE){
            System.out.println("Exception: " + ioE);
            return null;
        }
    }
}
